# prompt: generate python code to implement Smart SDLC - AI - Enhanced Software Development LifeCycle in Online Shopping (here we need the code with fixing bugs also and futher implementing features using AI) {output need virtual explaination }

# Install necessary libraries (if not already installed)
!pip install spacy
!python -m spacy download en_core_web_sm

import spacy

# --- Simulated Requirement Analysis ---
def analyze_requirement_with_ai(requirement_text):
    """
    Simulates AI analysis of a requirement using NLP.
    In a real scenario, this would involve more sophisticated models.
    """
    print("\n--- AI-Enhanced Requirement Analysis ---")
    nlp = spacy.load("en_core_web_sm")
    doc = nlp(requirement_text)

    print(f"Original Requirement: {requirement_text}")
    print("Identified Entities:")
    for ent in doc.ents:
        print(f"- {ent.text} ({ent.label_})")

    # Simple rule: Check for keywords related to payment or pricing
    if "price" in requirement_text.lower() or "payment" in requirement_text.lower():
        print("AI Suggestion: Ensure robust handling of currency and tax calculations.")
    if "users" in requirement_text.lower() or "customers" in requirement_text.lower():
         print("AI Suggestion: Consider user authentication and authorization requirements.")

    print("--- End Requirement Analysis ---")

# --- Simulated Bug Fixing (Example: Price Calculation Bug) ---

# Defective code with a potential bug
def calculate_total_price_defective(price, quantity, discount_percentage):
    """
    Calculates total price, but has a potential bug with discount application.
    """
    subtotal = price * quantity
    # Bug: Discount is applied incorrectly (e.g., not handled as a percentage)
    discount_amount = subtotal * discount_percentage # This should likely be discount_percentage / 100
    total = subtotal - discount_amount
    return total

# Hypothetical AI bug detection and suggestion (rule-based for this example)
def ai_suggest_bug_fix_price_calculation(code_snippet):
    """
    Simulates AI detecting a common price calculation bug and suggesting a fix.
    In a real scenario, this would involve code analysis models.
    """
    print("\n--- AI-Enhanced Bug Detection and Fixing ---")
    print("Analyzing code snippet for potential price calculation issues...")

    if "subtotal * discount_percentage" in code_snippet and "/" not in code_snippet.split("discount_percentage")[0]:
        print("AI Detected Potential Bug: Discount is likely being applied as a raw value instead of a percentage.")
        print("AI Suggested Fix: Change 'subtotal * discount_percentage' to 'subtotal * (discount_percentage / 100)'.")
    else:
        print("AI Analysis: No obvious price calculation bugs detected in this snippet.")
    print("--- End Bug Detection and Fixing ---")

# Fixed code
def calculate_total_price_fixed(price, quantity, discount_percentage):
    """
    Fixed calculation of total price.
    """
    subtotal = price * quantity
    # Fixed: Correctly apply the discount as a percentage
    discount_amount = subtotal * (discount_percentage / 100)
    total = subtotal - discount_amount
    return total

# --- Simulated Test Case Generation ---

def generate_test_cases_for_price_calculation(function_name):
    """
    Simulates AI generating basic test cases for a price calculation function.
    In a real scenario, this would involve analyzing function signature and logic.
    """
    print("\n--- AI-Enhanced Test Case Generation ---")
    print(f"Generating test cases for function: {function_name}")

    test_cases = [
        {"price": 10, "quantity": 2, "discount_percentage": 0, "expected_output": 20},
        {"price": 10, "quantity": 1, "discount_percentage": 10, "expected_output": 9},
        {"price": 20, "quantity": 3, "discount_percentage": 25, "expected_output": 45},
        {"price": 5, "quantity": 0, "discount_percentage": 10, "expected_output": 0}, # Edge case: quantity is 0
    ]

    print("Generated Test Cases:")
    for i, tc in enumerate(test_cases):
        print(f"Test Case {i+1}: Input={tc['price']}, {tc['quantity']}, {tc['discount_percentage']} Expected Output={tc['expected_output']}")

    print("--- End Test Case Generation ---")
    return test_cases

# --- Running the Simulation ---

# Example Requirement
online_shopping_requirement = "As a customer, I want to be able to add products to my cart and see the total price, including any applicable discounts, before proceeding to payment."
analyze_requirement_with_ai(online_shopping_requirement)

# Analyze the defective code for bugs
defective_code_snippet = """
def calculate_total_price_defective(price, quantity, discount_percentage):
    subtotal = price * quantity
    discount_amount = subtotal * discount_percentage
    total = subtotal - discount_amount
    return total
"""
ai_suggest_bug_fix_price_calculation(defective_code_snippet)

# Test the defective function
print("\n--- Testing Defective Function ---")
test_cases = generate_test_cases_for_price_calculation("calculate_total_price_defective")
for tc in test_cases:
    actual_output = calculate_total_price_defective(tc['price'], tc['quantity'], tc['discount_percentage'])
    print(f"Input: {tc['price']}, {tc['quantity']}, {tc['discount_percentage']}, Expected: {tc['expected_output']}, Actual: {actual_output}")
    if actual_output != tc['expected_output']:
        print("BUG DETECTED!")
    else:
        print("Test Passed")

# Test the fixed function
print("\n--- Testing Fixed Function ---")
for tc in test_cases:
    actual_output = calculate_total_price_fixed(tc['price'], tc['quantity'], tc['discount_percentage'])
    print(f"Input: {tc['price']}, {tc['quantity']}, {tc['discount_percentage']}, Expected: {tc['expected_output']}, Actual: {actual_output}")
    if actual_output != tc['expected_output']:
        print("BUG DETECTED!") # This should not happen with the fixed function
    else:
        print("Test Passed")

